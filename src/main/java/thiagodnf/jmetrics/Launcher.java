package thiagodnf.jmetrics;

import static com.google.common.base.Preconditions.checkArgument;

import java.io.IOException;
import java.nio.file.Path;
import java.util.EnumSet;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.extern.slf4j.Slf4j;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;
import thiagodnf.jmetrics.constant.MetricType;
import thiagodnf.jmetrics.constant.Separator;
import thiagodnf.jmetrics.model.ParetoFront;
import thiagodnf.jmetrics.util.ExportUtils;
import thiagodnf.jmetrics.util.FileUtils;
import thiagodnf.jmetrics.util.ImportUtils;
import thiagodnf.jmetrics.util.MetricUtils;
import thiagodnf.jmetrics.util.ParetoFrontUtils;

@Slf4j
@Command(
    name = "jmetrics", 
    footer = "Copyright(c) 2020 jmetrics", 
    description = "Evaluating Pareto-fronts generated by jMetal Framework"
)
public class Launcher implements Callable<Integer> {

    @Parameters(paramLabel = "folder", description = "folder that has the input files")
    private Path folder = null;

    @Option(names = { "-m", "--metrics" }, arity = "1..*", description = "set the metrics to be calculated\nvalues: ${COMPLETION-CANDIDATES}\ndefault: ${DEFAULT-VALUE}")
    private EnumSet<MetricType> metrics = EnumSet.of(MetricType.IGD, MetricType.Hypervolume, MetricType.Contribution, MetricType.ProportionalContribution);

    @Option(names = { "-s", "--separator" }, description = "set the column separator\nvalues: ${COMPLETION-CANDIDATES}\ndefault: ${DEFAULT-VALUE}")
    private Separator separator = Separator.Space;

    @Option(names = { "-h", "--help" }, usageHelp = true, description = "display this help and exit")
    private boolean help;

    public static void main(String[] args) throws IOException {

        int exitCode = new CommandLine(new Launcher())
                .setCaseInsensitiveEnumValuesAllowed(true)
                .execute(args);
        
        System.exit(exitCode);
    }
    
    @Override
    public Integer call() throws Exception {
        
        checkArgument(FileUtils.isValid(folder), "%s should be valid", folder);
                
        log.info("Calculating....");
        log.info("Folder: {}", folder);
        log.info("Metrics: {}", metrics);
        log.info("Separator: {}", separator);
        
        if (metrics.contains(MetricType.ALL)) {
            metrics = MetricType.getAll();
        }
        
        List<ParetoFront> paretoFronts = ImportUtils.readParetoFronts(folder, separator);
        
        ParetoFront approxParetoFront = ParetoFrontUtils.readOrGenerateParetoFront(folder, separator, paretoFronts);

        MetricUtils.calculate(approxParetoFront, paretoFronts, metrics);
        
        ExportUtils.toCSV(folder, paretoFronts, metrics);
        
        log.info("Done");
        
        return 0;
    }
}
